name: CI/CD Pipeline - Sistema Costos

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  PORT: 3000

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Setup backend environment variables
      working-directory: ./backend
      run: |
        cp process.env.example .env
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "NODE_ENV=test" >> .env
        echo "PORT=3000" >> .env
    
    - name: Run backend ESLint
      working-directory: ./backend
      run: npm run lint
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      continue-on-error: true
    
    - name: Check backend security vulnerabilities
      working-directory: ./backend
      run: npm audit --audit-level moderate
      continue-on-error: true

  test-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test
      continue-on-error: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  docker-build:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        docker build -f docker/backend.Dockerfile -t sistema-costos-backend:${{ github.sha }} ./backend
    
    - name: Build frontend Docker image
      run: |
        docker build -f docker/frontend.Dockerfile -t sistema-costos-frontend:${{ github.sha }} ./frontend
    
    - name: Test Docker images
      run: |
        # Test backend container
        docker run -d --name test-backend -p 3001:3000 sistema-costos-backend:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3001/health || echo "Backend health check failed"
        docker stop test-backend
        docker rm test-backend
        
        # Test frontend container
        docker run -d --name test-frontend -p 3002:3001 sistema-costos-frontend:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3002 || echo "Frontend health check failed"
        docker stop test-frontend
        docker rm test-frontend
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Run backend security audit
      working-directory: ./backend
      run: npm audit --audit-level high
      continue-on-error: true
    
    - name: Run frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level high
      continue-on-error: true

  deploy-staging:
    needs: [docker-build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos para desplegar en staging
        # Ejemplo: Deploy a Heroku, Railway, o similar

  deploy-production:
    needs: [docker-build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos para desplegar en producción
        # Ejemplo: Deploy a Heroku, Railway, AWS, etc. 